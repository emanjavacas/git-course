# -*- after-save-hook: org-reveal-export-to-html; -*-

#+Title: Git Tutorial
#+Author: Enrique Manjavacas
#+Date: 14/10/2016
#+Link: https://emanjavacas.github.com/slides/git-course

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:t
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:2 timestamp:nil
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: nil
#+REVEAL_THEME: league
#+REVEAL_HLEVEL: 1
#+REVEAL_EXTRA_CSS: ./css/extra_git.css

* Getting started
  
#+attr_reveal: :frag (roll-in)
- This is [[https://emanjavacas.github.io][me]].

- And these are [[https://www.github.com/emanjavacas/git-course][materials for the course]].

** Get git

Follow the instructions for your OS [[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git][here]].

*** [Optionally/Alternatively] install a Git client 

 See [[https://www.github.com/emanjavacas/git-course][Materials for the course]] for links to different possibilities.


* About Git

** What is git?

"Git is a free and *open source distributed version control system* designed to handle everything from small to very large projects with speed and efficiency" ([[https://en.wikipedia.org/wiki/Git_%28software%29][Wikipedia]])
   
#+REVEAL: split

A Version Control System (VCS) is a methodology or tool that...

#+attr_reveal: :frag (roll-in)
 - helps you *keep track of changes* you make to the files in your project
 - and allows you to *communicate and synchronize your changes* with other people.
   # 

*** History

#+attr_reveal: :frag (roll-in)
- Developed by Linux Torvalds as a means to enable the development of the Linux Kernel     
  #+attr_reveal: :frag (roll-in)
  - [[https://www.linux.com/blog/10-years-git-interview-git-creator-linus-torvalds][Interview with occassion of Git's 10th Year Anniversary]]
  - Inspired by BitKeeper (Distributed VCS that isn't open source)

- Relatively recent in the ecosystem of VCS tools
  #+attr_reveal: :frag (roll-in)
  - [[https://github.com/git/git/commit/e83c5163316f89bfbde7d9ab23ca2e25604af290][First git's commit 2005]]
  - Its main feature being that it is a *distributed* or *decentralized* system

# Originally, these repositories were accessible only if you were logged
# directly into the machines they were stored on. tools such as CVS, and
# later Subversion, were created. They allowed developers to work remotely
# from the repository and send their changes back using a network connection.

# These systems follow a centralized repository model. That means there
# is one central repository that everyone sends their changes to. Each
# developer keeps a copy of the latest version of the repository, and when-
# ever they make a change to it, they send that change back to the main
# repository.

# Instead of having one central repository that
# you and everyone else on your team sends changes to, you each have
# your own repository that has the entire history of the project. Making
# a commit doesnâ€™t involve connecting to a remote repository; the change
# is recorded in your local repository.

# Developers can have access to send the changes directly to the main
# repository (an action called pushing in Git), or they might have to
# submit patches, which are small sets of changes, to the project's maintainer
# and have them update the main repository.

# A centralized system is like having one bank that every developer on your team uses.
# A distributed system is like each developer having their own personal bank.

# Differences:
# ------------
# No need of internet connection for development
# Easy branching
# No need to set commit access policies

*** Why you need it?

 #+attr_reveal: :frag (roll-in)
 - Because it is used by instructors in the study programme.
 - Because the need for collaborative tools is increasing and VCS are most powerful.

*** VCS vs. Collaborative Text Editors (GoogleDocs, etc.)

#+BEGIN_NOTES
Check how many actually think Google-Docs/Dropbox is a good solution to version mananagement? 
This section can be skipped if the audience is already convinced of the answer (NO).
#+END_NOTES

#+reveal: split
#+BEGIN_HTML
<img class="stretch" src="./img/dropbox.png">
#+END_HTML

[[https://www.dropbox.com/en/help/36][Source: Dropbox Help]]

#+reveal: split

Synchronized vs Asynchronized Solution to the problem of collaborative editing.

#+reveal: split
#+BEGIN_QUOTE
"A practice by which dispersed users are able to concurrently modify shared artifacts 
with the guarantee that changes by different users will not automatically overwrite each other" 
(Altmanninger et al. 2009)
#+END_QUOTE

#+REVEAL: split
*Collaborative Text Editors*
#+attr_reveal: :frag (roll-in)
- Pros
  #+attr_reveal: :frag (roll-in)
  - Fast, real-time incorporation of changes.

- Cons
  #+attr_reveal: :frag (roll-in)
  - Impossible to work offline
  - No guarantees that change history reflects the real sequence of changes

#+REVEAL: split
*VCS*
#+attr_reveal: :frag (roll-in)
- Pros
  #+attr_reveal: :frag (roll-in)
  - Documented change history
  - Unlimited in terms of participants

- Cons
  #+attr_reveal: :frag (roll-in)
  - Steep learning curve

*** Take-away message

    #+attr_reveal: :frag (roll-in)
    - Trade-off between rigor (data-side) and easiness (UX-side).
    - Most users are limited to one very end.

** What is not ~git~?
    
*** git vs GitHub
#+BEGIN_QUOTE
"GitHub is a web-based *Git repository hosting service*, which offers all of the distributed revision control and source code management (SCM) functionality of Git as well as adding its own features." ([[https://en.wikipedia.org/wiki/GitHub][Wikipedia]])
#+END_QUOTE

#+BEGIN_HTML
<p style="font-size: 0.75em; margin: 200px 200px 0 0; text-align: right;">but there are others, see BitBucket</p>
#+END_HTML

*** A backup system

#+attr_reveal: :frag (roll-in)
- While you could use git/GitHub for backing up, it *cannot handle large/binary files very well*.


* Basic Git Concepts

Let's introduce a bit of vocabulary (Last bit of me talking alone!)

#+BEGIN_HTML
<p style="font-size: 0.75em; margin-top: 220px; text-align: right;">See <a src="https://www.github.com/emanjavacas/git-course">the repository README</a> for a glossary of terms</p>
#+END_HTML

# Double indent to avoid showing up in toc
*** Repository
    #+BEGIN_NOTES
    Repositories are always a copy
    #+END_NOTES
    All tracked files in your project plus the full history of changes (commits and branches).

#+reveal: split
**** Types of Repository
     #+attr_reveal: :frag (roll-in)
     - *Local*
       Repository hosted in your current machine, to which you can make changes.
     - *Remote*
       Repository hosted in a different machine, to which you have access from your current machine.

*** Working Tree (or directory)
    #+attr_reveal: :frag (roll-in)
    - Current local view of the project (folder).
    - It can be:
      #+attr_reveal: :frag (roll-in)
      - "clean" (Up to date with the tracked version)
      - "dirty" (Local changes haven't been registered yet)

    #+reveal: split

    Ways to change the working tree:
    #+attr_reveal: :frag (roll-in)
     - Switch back to a previous state of the project (revert)
     - Add a change to the current state (commit)
     - Moving to another (possibly new) branch (A.K.A. ~checkout~)
     - Move to a "future" state of the project (e.g. pulling from remote changes)

*** Commit
    A snapshot including changes to a previous state of the repository.

*** Branch
    Any of the parallel states in the repository (a particular commit history).

* Hands-on Tutorial

** Create your own repository
# Objective: initialize a repository, and set a remote on GitHub
# Situation: single

For this tutorial, we are going to create a (very basic) resume homepage.

*** Using the Command Line

#+reveal: split
Create the remote

#+BEGIN_HTML
<img class="stretch" src="./img/new_repo.png">
#+END_HTML

#+reveal: split
Sync locally (set a local to track the remote)

#+BEGIN_HTML
<img src="./img/new_repo_setup_gh.png">
#+END_HTML

#+reveal: split
Initialize the repository

  #+BEGIN_SRC bash
  $ git init

  Initialized empty Git repository in /home/enrique/Documents/courses/resume
  #+END_SRC

#+reveal: split
Track the remote

  #+BEGIN_SRC bash
  $ git remote add origin https://github.com/emanjavacas/resume.git
  #+END_SRC

*** Using GitHub Desktop

#+reveal: split
#+BEGIN_HTML
<img src="./img/new_repo_gh1.png">
#+END_HTML

#+reveal: split
#+BEGIN_HTML
<img src="./img/new_repo_gh2.png">
#+END_HTML

*** Your turn

#+attr_reveal: :frag (roll-in)
- First we need to download a template  
  #+attr_reveal: :frag (roll-in)
  - Google for "~free html resume template~"
  - Pick one from [[http://trendytheme.net/20-best-free-html-resume-templates-to-download/][here]]
  - Download the one I picked from [[https://www.github.com/emanjavacas/resume/archive/v0.0.zip][here]]
- Create a remote repository (github.com)
- Set the local to track the remote
  
** Commiting a single change
# Objective: Do some local changes, commit and push
# Situation: single
# Workflow: - Modify info - commit - push

#+reveal: split
The git workflow

#+BEGIN_HTML
<iframe class="stretch" src="flow.html" style="align: middle;" width="600px"></iframe>
#+END_HTML

#+reveal: split
Make edit 

[[./img/commit_edit.png]]

#+reveal: split
Checking the status of the Working Tree

#+BEGIN_SRC bash
$ git status

On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   index.html

no changes added to commit (use "git add" and/or "git commit -a")
#+END_SRC

#+reveal: split
Diffing

[[./img/commit_edit_diff_gh.png]]

*** From the command line

#+reveal: split
Add (stage)

  #+BEGIN_SRC bash
  $ git add index.html
  #+END_SRC

#+reveal: split
Commit

  #+BEGIN_SRC bash
  $ git commit -m "Changed name"

  [master 9a23987] Changed name
    1 file changed, 2 insertions(+), 2 deletions(-)
  #+END_SRC

#+reveal: split
 Push

  #+BEGIN_SRC bash
  $ git push
  
  Counting objects: 3, done.
  Delta compression using up to 2 threads.
  Compressing objects: 100% (3/3), done.
  Writing objects: 100% (3/3), 395 bytes | 0 bytes/s, done.
  Total 3 (delta 2), reused 0 (delta 0)
  remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
  To https://github.com/emanjavacas/resume.git
    eb6121f..9a23987  master -> master
  #+END_SRC

*** From GitHub Desktop
#+reveal: split
Add (stage) & commit

[[./img/add_commit_gh.png]]

#+reveal: split
Push (sync)

[[./img/sync_commit_gh.png]]

*** Your turn
#+attr_reveal: :frag (roll-in)
- Change your info in ~index.html~
- Add & Commit
- Push


** Commiting multiple changes
# Objective: Do local changes, group commits and push them separatedly
# Situation: single
# Workflow: modify font-size, add new background img, modify css for new img - commits - push;

#+BEGIN_NOTES
More realistic setup, choose what to include in each commit separatedly
#+END_NOTES

#+reveal: split
Make changes to multiple files

[[./img/commits_edit.png]]

#+reveal: split
Check the changes

#+BEGIN_SRC bash
$ git status

On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   index.html
        modified:   css/main.css
        modified:   images/spectrum.jpg
#+END_SRC

*** From the command line

#+reveal: split
Git flow (add, commit)
  #+attr_reveal: :frag (roll-in)
  - Add email update
    #+BEGIN_SRC bash
    $ git add index.html

    $ git commit -m "Changed mailto"
    #+END_SRC

  - Add background update (both files at once)
    #+BEGIN_SRC bash
    $ git add css/main.css images/spectrum.jpg

    $ git commit -m "Changed background"
    #+END_SRC

#+reveal: split
Push

#+BEGIN_SRC bash
$ git push

Pushing to https://github.com/emanjavacas/resume.git
Counting objects: 16, done.
Delta compression using up to 2 threads.
Writing objects: 100% (16/16), 252.52 KiB | 0 bytes/s, done.
Total 16 (delta 7), reused 0 (delta 0)
POST git-receive-pack (258725 bytes)
remote: Resolving deltas: 100% (7/7), completed with 3 local objects.        
To https://github.com/emanjavacas/resume.git
   9a23987..b45d6be  master -> master
#+END_SRC

*** From GitHub Desktop

#+reveal: split
Add (stage) & commit
[[./img/add_mail_commit.png]]

#+reveal: split
Add (stage) & commit multiple changes
[[./img/add_multiple_commit.png]]

#+reveal: split
Push both commits

[[./img/multiple_commited_gh.png]]


*** Your turn

#+attr_reveal: :frag (roll-in)
- Search for a background image
  #+attr_reveal: :frag (roll-in)
  - Google for images (labeled for reuse; matching color; appropriate size)
  - Or download the one I used from [[https://github.com/emanjavacas/resume/raw/dev/images/spectrum.jpg][here]].
- Put the file in the corresponding folder
- Change ~main.css~
- Add & Commit (make sure you commit both files)
- Do some other changes & commit them separatedly
- Push everything

** Branching
# Creating a branch, and merging branches
# Situation: single
# Workflow: New branch for a new feat (TODO) -> git flow
We are going to edit the content in the "resume" tab

*** From the command line

#+reveal: split
Create a new branch
  #+attr_reveal: :frag (roll-in)
  - Long version
    #+attr_reveal: :frag (roll-in)
    - Create branch
      #+BEGIN_SRC bash
      $ git branch resume
      #+END_SRC
    - Move to it (checkout)
      #+BEGIN_SRC bash
      $ git checkout resume
      
      Switched to branch 'resume'
      #+END_SRC
  - Short version
    #+BEGIN_SRC bash
    $ git checkout -b resume
    #+END_SRC

#+reveal: split
See which branches are there

  #+BEGIN_SRC bash
  $ git branch -v
  
  master 0a7be54 Changed background
  * resume 299b6f9 Changed background
  #+END_SRC

#+reveal: split
 Switch to a particular branch (magic!)

  #+BEGIN_SRC bash
  $ git checkout master

  Switched to branch 'resume'
  #+END_SRC

*** From GitHub Desktop

#+reveal: split
Create a branch

[[./img/new_branch_gh.png]]

#+reveal: split
See all branches

[[./img/branches_gh.png]]

#+reveal: split
Select a branch

[[./img/switch_to_branch_gh.png]]

*** Your turn

#+attr_reveal: :frag (roll-in)
- Create a branch (give it the name you prefer)
- Switch to it (if you are not there yet)
- Make local changes (as shown previously) & commit

#+reveal: split
Example of changes

#+BEGIN_HTML
<img src="./img/branch_changes_gh.png" class="stretch">
#+END_HTML

#+reveal: split
#+attr_reveal: :frag (roll-in)
- Push (and see the results in your remote)
- Switch branches and see how the Working Tree changes accordingly

** Merging from local branch
# Objective: merging is just a commit, familiarize with the merging tool/syntax
# Situation: single
# Workflow: ...

*** From the command line
#+reveal: split
Compare branches

  #+BEGIN_SRC bash
  $ git diff resume master
  #+END_SRC

#+reveal: split
[[./img/diff_branches.png]]

#+reveal: split
Merge target branch (resume) into receiving branch (master)

  #+attr_reveal: :frag (roll-in)
  - Switch to receiving branch (master)
    #+BEGIN_SRC bash
    git checkout master
    #+END_SRC
    
  - Do the merge (resume gets merged into master)
    #+BEGIN_SRC bash
    $ git merge resume

    Updating 299b6f9..5032375
    Fast-forward
     index.html | 24 ++++--------------------
     1 file changed, 4 insertions(+), 20 deletions(-)
    #+END_SRC

  - Push
    #+BEGIN_SRC bash
    $ git push
    #+END_SRC

*** From GitHub Desktop

#+reveal: split
Switch to target branch (in our case, master)

[[./img/switch_to_master_gh.png]]

#+reveal: split
Select "merge from resume"

[[./img/merge_from_resume_gh.png]]

#+reveal: split
A Merge is just a commit

[[./img/merge_commit_gh.png]]

#+reveal: split
Push (Sync)

*** Your turn
#+attr_reveal: :frag (roll-in)
- Switch to receiving branch 
- Merge from branch "resume"
- Push

** Merging a pull request
# Objective: automerging, 
# Situation: couples, forking from each other, submitting pull requests, merging
# Workflow: every one pushes typos to their repositories; partner forks, fixes and submits pull-request; everyone merges pull-request

#+BEGIN_NOTES
Merging locally is very useful but is not the only type of merge
#+END_NOTES

#+reveal: split
Merges are not restricted to local branches. You can also merge:

  #+attr_reveal: :frag (roll-in)
  - A branch in your remote (an "origin" branch)
  - A branch in someone else's remote - fork source project (an "upstream" branch).
  - A branch of someone's fork of your project. Pull Request.

#+reveal: split
Now you are going to merge a pull request that your colleague is going to submit.

*** Your turn
#+reveal: split
Fork your colleague's project and clone it locally

[[./fork_gh.png]]

#+reveal: split
[[./img/clone_fork.png]]

#+reveal: split
Introduce (conspicuous) typos in your local index.html file (push them too)

[[./img/typos_gh.png]]

#+reveal: split
Pull and merge from your colleague's upstream fork to see the typos

[[./img/merge_upstream.png]]

[[./img/merge_upstream_changes.png]]

#+reveal: split
Modify the typos and commit

[[./img/fixed_typos_gh.png]]

#+reveal: split
Issue a pull request

[[./img/pull_request_gh.png]]

#+reveal: split
Merge your colleague's pull request into your master branch

#+reveal: split
Go to your github project

[[./img/new_pull_request_web.png]]

#+reveal: split
Check pull request

[[./img/incoming_pull_request_web.png]]

#+reveal: split
Accept incoming pull request

[[./img/merge_pull_request_web.png]]

** Merging a conflicting pull request
# Objective: manual merging from a remote
# Situation: couples, forking from each other, submitting pull requests, merging
# Workflow: every one pushes typos to their repositories; partner forks, fixes and submits pull-request; everyone merges pull-request

That was easy, but sometimes merging doesn't work automatically. Let's see how.

#+reveal: split
Modify your local repository

#+reveal: split
Modify your fork of your colleague

#+reveal: split
Issue pull request

#+reveal: split
Check your colleague's incoming pull request

#+reveal: split
To solve the conflict you need:

#+attr_reveal: :frag (roll-in)
- Clone your colleague's fork branch into your project
  #+attr_reveal: :frag (roll-in)
  - Create a new branch 
    #+BEGIN_SRC bash
    $ git checkout yourcolleague-branch local-branch-name
    #+END_SRC
    
  - Pull from the remote branch
    #+BEGIN_SRC bash
    $ git pull https://github.com/yourcolleage/resume.git local-branch-name
    #+END_SRC

- Solve the conflict
  #+attr_reveal: :frag (roll-in)
  - Checkout the new local branch
    #+BEGIN_SRC bash
    $ git checkout local-branch-name
    #+END_SRC

  - Edit the conflicted file
  - Commit and push the changed file

** Revert
# Objective: learn how to revert pushed commits (revert) and uncommited changes (stash)
  # see http://stackoverflow.com/questions/4114095/how-to-revert-git-repository-to-a-previous-commit/4114122#4114122
  # for an explanation of revert workflows in three different scenarios
# Situation: single
# Workflow: ...

*** From GitHub Desktop

#+BEGIN_NOTES
Revert is an operation that is less common than what you might think.
The "git philosophy" encourage you to try things in a new branch and only merge if everything worked.
#+END_NOTES



* Goodie

- If you change the name of your repository to ~username.github.io~, you can get your own personal page served by GitHub
- More info about GitHub Pages [[https://pages.github.com/][here]].




