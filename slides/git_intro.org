# -*- after-save-hook: org-reveal-export-to-html; -*-

#+Title: Git Tutorial
#+Author: Enrique Manjavacas
#+Date: 14/10/2016
#+Link: https://emanjavacas.github.com/slides/git-course

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:t
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:2 timestamp:nil
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: nil
#+REVEAL_THEME: league
#+REVEAL_HLEVEL: 1
#+REVEAL_EXTRA_CSS: ./extra_git.css

* Getting started

#+attr_reveal: :frag (roll-in)
- This is [[https://emanjavacas.github.io][me]].

- And these are [[https://www.github.com/emanjavacas/git-course][materials for the course]].

** Get git

Follow the instructions for your OS [[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git][here]].

** [Optionally/Alternatively] install a Git client 

See [[https://www.github.com/emanjavacas/git-course][Materials for the course]] for links to different possibilities.


* About Git

** What is git?

"Git is a free and *open source distributed version control system* designed to handle everything from small to very large projects with speed and efficiency" ([[https://en.wikipedia.org/wiki/Git_%28software%29][Wikipedia]])
   
#+REVEAL: split

A Version Control System (VCS) is a methodology or tool that...

#+attr_reveal: :frag (roll-in)
 - helps you *keep track of changes* you make to the files in your project
 - and allows you to *communicate and synchronize your changes* with other people.
   # 

*** History

#+attr_reveal: :frag (roll-in)
- Developed by Linux Torvalds as a means to enable the development of the Linux Kernel     
  #+attr_reveal: :frag (roll-in)
  - [[https://www.linux.com/blog/10-years-git-interview-git-creator-linus-torvalds][Interview with occassion of Git's 10th Year Anniversary]]
  - Inspired by BitKeeper (Distributed VCS that isn't open source)

- Relatively recent in the ecosystem of VCS tools
  #+attr_reveal: :frag (roll-in)
  - [[https://github.com/git/git/commit/e83c5163316f89bfbde7d9ab23ca2e25604af290][First git's commit 2005]]
  - Its main feature being that it is a *distributed* or *decentralized* system

# Originally, these repositories were accessible only if you were logged
# directly into the machines they were stored on. tools such as CVS, and
# later Subversion, were created. They allowed developers to work remotely
# from the repository and send their changes back using a network connection.

# These systems follow a centralized repository model. That means there
# is one central repository that everyone sends their changes to. Each
# developer keeps a copy of the latest version of the repository, and when-
# ever they make a change to it, they send that change back to the main
# repository.

# Instead of having one central repository that
# you and everyone else on your team sends changes to, you each have
# your own repository that has the entire history of the project. Making
# a commit doesnâ€™t involve connecting to a remote repository; the change
# is recorded in your local repository.

# Developers can have access to send the changes directly to the main
# repository (an action called pushing in Git), or they might have to
# submit patches, which are small sets of changes, to the project's maintainer
# and have them update the main repository.

# A centralized system is like having one bank that every developer on your team uses.
# A distributed system is like each developer having their own personal bank.

# Differences:
# ------------
# No need of internet connection for development
# Easy branching
# No need to set commit access policies

*** Why you need it?

 #+attr_reveal: :frag (roll-in)
 - Because it is used by instructors in the study programme.
 - Because the need for collaborative tools is increasing and VCS are most powerful.

*** VCS vs. Collaborative Text Editors (GoogleDocs, etc.)

#+BEGIN_NOTES
Check how many actually think Google-Docs/Dropbox is a good solution to version mananagement? 
This section can be skipped if the audience is already convinced of the answer (NO).
#+END_NOTES

#+reveal: split
#+BEGIN_HTML
<img src="./img/dropbox.png" style="margin-top: -100px">
#+END_HTML

[[https://www.dropbox.com/en/help/36][Source: Dropbox Help]]

#+reveal: split

Synchronized vs Asynchronized Solution to the problem of collaborative editing.

#+reveal: split
#+BEGIN_QUOTE
"A practice by which dispersed users are able to concurrently modify shared artifacts 
with the guarantee that changes by different users will not automatically overwrite each other" 
(Altmanninger et al. 2009)
#+END_QUOTE

#+REVEAL: split
*Collaborative Text Editors*
#+attr_reveal: :frag (roll-in)
- Pros
  #+attr_reveal: :frag (roll-in)
  - Fast, real-time incorporation of changes.

- Cons
  #+attr_reveal: :frag (roll-in)
  - Impossible to work offline
  - No guarantees that change history reflects the real sequence of changes

#+REVEAL: split
*VCS*
#+attr_reveal: :frag (roll-in)
- Pros
  #+attr_reveal: :frag (roll-in)
  - Documented change history
  - Unlimited in terms of participants

- Cons
  #+attr_reveal: :frag (roll-in)
  - Steep learning curve

*** Take-away message

    Trade-off between and simplicity.
    #+BEGIN_NOTES
    Currently, we are mostly at one very end.
    #+END_NOTES

** What is not ~git~?

    #+attr_reveal: :frag (roll-in)
    - Trade-off between rigor (data-side) and easiness (UX-side).
    - Most users are limited to one very end.
    
*** git vs GitHub

#+attr_reveal: :frag (roll-in)
- "GitHub is a web-based *Git repository hosting service*, which offers all of the distributed revision control and source code management (SCM) functionality of Git as well as adding its own features." ([[https://en.wikipedia.org/wiki/GitHub][Wikipedia]]) (but there are others, see BitBucket).

*** A backup system

#+attr_reveal: :frag (roll-in)
- While you could use git/GitHub for backing up, it *cannot handle large/binary files very well*.

* Basic Git Concepts

Let's introduce a bit of vocabulary (Last bit of me talking alone!)

#+BEGIN_HTML
<p style="font-size: 0.75em; margin-top: 220px; text-align: right;">See <a src="https://www.github.com/emanjavacas/git-course">the repository README</a> for a glossary of terms</p>
#+END_HTML

# Double indent to avoid showing up in toc
*** Repository
    #+BEGIN_NOTES
    Repositories are always a copy
    #+END_NOTES
    All tracked files in your project plus the full history of changes (commits and branches).

#+reveal: split
**** Types of Repository
     #+attr_reveal: :frag (roll-in)
     - *Local*
       Repository hosted in your current machine, to which you can make changes.
     - *Remote*
       Repository hosted in a different machine, to which you have access from your current machine.

*** Working Tree (or directory)
    #+attr_reveal: :frag (roll-in)
    - Current local view of the project (folder).
    - It can be:
      #+attr_reveal: :frag (roll-in)
      - "clean" (Up to date with the tracked version)
      - "dirty" (Local changes haven't been registered yet)

    #+reveal: split

    Ways to change the working tree:
    #+attr_reveal: :frag (roll-in)
     - Switch back to a previous state of the project (revert)
     - Add a change to the current state (commit)
     - Moving to another (possibly new) branch (A.K.A. ~checkout~)
     - Move to a "future" state of the project (e.g. pulling from remote changes)

*** Commit
    A snapshot including changes to previous states of the repository.

*** Branch
    Any of the parallel states in the repository (a particular commit history).

* Hands-on Tutorial

** Create your own repository
# Objective: initialize a repository, and set a remote on GitHub
# Situation: single

For this tutorial, we are going to create a (very basic) resume homepage.

#+REVEAL: split
First we need to download a template

#+attr_reveal: :frag (roll-in)
- Google for `free html resume template`
- Pick one from [[http://trendytheme.net/20-best-free-html-resume-templates-to-download/][here]]
- Download the one I picked from [[https://www.github.com/emanjavacas/resume/archive/v0.0.zip][here]].

*** Create the remote repository (GitHub)

#+BEGIN_HTML
<img src="./img/new_repo.png">
#+END_HTML

*** Set local repository to track remote repository

**** Using the Command Line

***** Initialize the repository
 #+BEGIN_SRC bash
 $ git init
 Initialized empty Git repository in /home/enrique/Documents/courses/git/resume
 #+END_SRC

***** Set the remote
 #+BEGIN_SRC bash
 $ git remote add origin https://github.com/emanjavacas/resume.git
 #+END_SRC

**** Using GitHub Desktop

Screenshot

** Commit changes
# Objective: Do some local changes, commit and push
# Situation: single
# Workflow: - Modify info - commit - push; modify font-size, add new background img, modify css for new img - commits - push;

#+reveal: split
#+BEGIN_HTML
<iframe width="300px" height="600px" src="flow.html"></iframe>
#+END_HTML

*** Single commit
#+attr_reveal: :frag (roll-in)
- Modify info
- Git flow (add, commit)
- Push

*** Multiple commits
    #+BEGIN_NOTES
    More realistic setup, 
    #+END_NOTES

#+attr_reveal: :frag (roll-in)
- Modify font-size
- Git flow (add, commit)
- Push

** Branching
# Creating a branch, and merging branches
# Situation: single
# Workflow: New branch for a new feat (TODO) -> git flow

** Merging
*** Merging from local branch
# Objective: merging is just a commit, familiarize with the merging tool/syntax
# Situation: single
# Workflow: ...

*** Merging a pull request
# Objective: automerging, manual merging from a remote
# Situation: couples, forking from each other, submitting pull requests, merging
# Workflow: every one pushes typos to their repositories; partner forks, fixes and submits pull-request; everyone merges pull-request

** Revert

# Objective: learn how to revert pushed commits (revert) and uncommited changes (stash)
  # see http://stackoverflow.com/questions/4114095/how-to-revert-git-repository-to-a-previous-commit/4114122#4114122
  # for an explanation of revert workflows in three different scenarios
# Situation: single
# Workflow: ...

* Goodie

- If you change the name of your repository to ~username.github.io~, you can get your own personal page served by GitHub
- More info about GitHub Pages [[https://pages.github.com/][here]].
